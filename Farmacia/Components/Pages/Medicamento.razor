@page "/medicamentos"
@using Farmacia.Share.Model;
@using Farmacia.BLL.Interface;
@using Farmacia.BLL.Model;
@inject IMedicamento mdsMedicamentos;
@inject NotificationService Notification;
@inject DialogService DialogService;

<h1>Medicamentos</h1>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="row">
            <RadzenDataGrid Data="@mListaMedicamentos" AllowSorting="true" Style="400px;" TItem="cMedicamento" AllowPaging="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" PageSize="5" SelectionMode="DataGridSelectionMode.Single" @bind-Value=@mMedicamentoSeleccionado>

                <Columns>
                    <RadzenDataGridColumn Property="@nameof(cMedicamento.IdMedicamento)" Title="IdMedicamento"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(cMedicamento.Descripcion)" Title="Descripcion"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(cMedicamento.Presentacion)" Title="Presentacion"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(cMedicamento.Marca)" Title="Marca"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(cMedicamento.Estado)" Title="Estado"></RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>

        <div class="row" style="margin: 10px">
            <div class="col-md-4 col-lg-4 col-xl-4 col-xxl-4 col-sm-12 col-xs-12" style="margin: 5px">
                <RadzenButton ButtonStyle="ButtonStyle.Primary" Text="Agregar" Click="@AgregarMedicamento" />
            </div>
            <div class="col-md-4 col-lg-4 col-xl-4 col-xxl-4 col-sm-12 col-xs-12" style="margin: 5px">
                <RadzenButton ButtonStyle="ButtonStyle.Secondary" Text="Actualizar" Click="@ActualizarMedicamento" />
            </div>
            <div class="col-md-4 col-lg-4 col-xl-4 col-xxl-4 col-sm-12 col-xs-12" style="margin: 5px">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Text="Eliminar" Click="@EliminarMedicamento" />
            </div>
        </div>
    </div>
</div>

@code {
    List<cMedicamento> mListaMedicamentos;
    IList<cMedicamento> mMedicamentoSeleccionado;
    cMedicamento mMedicamento = new cMedicamento();

    protected override async Task OnInitializedAsync()
    {
        mListaMedicamentos = await mdsMedicamentos.getMedicamentos();
    }

    private async Task AgregarMedicamento()
    {
        var result = await DialogService.OpenAsync<MedicamentoDialog>("Agregar Medicamento", new Dictionary<string, object>());

        if (result != null && (bool)result)
        {
            mListaMedicamentos = await mdsMedicamentos.getMedicamentos();
            StateHasChanged();
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Medicamento Agregado",
                    Detail = "El Medicamento se ha agregado correctamente"
                });
        }
        else
        {
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Error al agregar el Medicamento"
                });
        }
    }

    private async Task ActualizarMedicamento()
    {
        if (mMedicamentoSeleccionado == null || !mMedicamentoSeleccionado.Any())
        {
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Advertencia",
                    Detail = "Debe seleccionar un medicamento para actualizar"
                });
            return;
        }

        mMedicamento = mMedicamentoSeleccionado.FirstOrDefault();
        var result = await DialogService.OpenAsync<MedicamentoDialog>("Actualizar Medicamento", new Dictionary<string, object>
    {
        { "Medicamento", mMedicamento }
    });

        if (result != null && (bool)result)
        {
            mListaMedicamentos = await mdsMedicamentos.getMedicamentos();
            mMedicamentoSeleccionado = null;
            StateHasChanged();

            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Medicamento Actualizado",
                    Detail = "El Medicamento se ha actualizado correctamente"
                });
        }
        else
        {
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Error al actualizar el Medicamento"
                });
        }
    }


    private async Task EliminarMedicamento()
    {

        if (mMedicamentoSeleccionado == null || !mMedicamentoSeleccionado.Any())
        {
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Advertencia",
                    Detail = "Debe seleccionar un medicamento para eliminar"
                });
            return;
        }

        var medicamento = mMedicamentoSeleccionado.FirstOrDefault();
        int idMedicamento = medicamento.IdMedicamento;

        if (await mdsMedicamentos.eliminarMedicamento(idMedicamento.ToString()) == true)
        {
            mListaMedicamentos = await mdsMedicamentos.getMedicamentos();
            mMedicamento = new cMedicamento();
            mMedicamentoSeleccionado = null;
            StateHasChanged();
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Medicamento Eliminado",
                    Detail = "El Medicamento se ha eliminado correctamente"
                });
        }
        else
        {
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "Error al eliminar el Medicamento"
                });
        }
    }

}
